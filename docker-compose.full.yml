# üê≥ DOCKER COMPOSE COMPLETO - CL√çNICA VETERINARIA
# Orquesta los 3 servicios: MySQL + Backend + Frontend

services:
  # ========== BASE DE DATOS ==========
  mysql:
    image: mysql:8.0
    container_name: vetclinic-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-gestion_citas}
      MYSQL_USER: ${MYSQL_USER:-vetclinic}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-vetclinic123}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - vetclinic-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root123}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ========== BACKEND (SPRING BOOT) ==========
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vetclinic-backend
    restart: unless-stopped
    environment:
      # Base de datos
      SPRING_DATASOURCE_URL: jdbc:mysql://${MYSQL_HOST:-mysql}:3306/${MYSQL_DATABASE:-gestion_citas}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-vetclinic}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-vetclinic123}

      # JWT
      JWT_SECRET: ${JWT_SECRET:-jwt-secret-dev-2025-vetclinic}

      # JPA
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false

      # CORS (permitir frontend)
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://frontend,http://localhost:80}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - vetclinic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ========== FRONTEND (REACT + NGINX) ==========
  frontend:
    build:
      context: ./frontend-gestion-citas
      dockerfile: Dockerfile
      args:
        # Esta variable se usa en BUILD TIME
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8080/api}
    container_name: vetclinic-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - vetclinic-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ========== LANDING PAGE (HTML + NGINX) ==========
  landing:
    build:
      context: ./landing-page
      dockerfile: Dockerfile
    container_name: vetclinic-landing
    restart: unless-stopped
    ports:
      - "${LANDING_PORT:-80}:80"
    depends_on:
      - frontend
    networks:
      - vetclinic-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

# ========== VOL√öMENES ==========
volumes:
  mysql-data:
    driver: local

# ========== REDES ==========
networks:
  vetclinic-network:
    driver: bridge
    name: vetclinic-network


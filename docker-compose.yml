# ====================================================================
# Docker Compose - Clínica Veterinaria (Stack Completo)
# ====================================================================
# Proyecto: Sistema completo con Backend, Frontend, Landing y MySQL
# Fecha: 2025-01-20
# Versión: 1.0.0
# ====================================================================

version: '3.8'

# ====================================================================
# SERVICIOS
# ====================================================================
services:

  # ==================================================================
  # SERVICIO 1: MySQL Database
  # ==================================================================
  mysql:
    image: mysql:9.0
    container_name: clinica-mysql
    restart: unless-stopped
    
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-clinicaveterinaria}
      MYSQL_USER: ${MYSQL_USER:-clinica_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-clinica_pass}
      TZ: America/Bogota
    
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    
    volumes:
      # Volumen persistente para datos
      - mysql-data:/var/lib/mysql
      # Script de inicialización (ejecuta al crear contenedor)
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      # Configuración personalizada de MySQL
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    
    networks:
      - clinica-network
    
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password

  # ==================================================================
  # SERVICIO 2: Backend Spring Boot
  # ==================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: clinica-backend
    restart: unless-stopped
    
    environment:
      # Configuración de base de datos
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE:-clinicaveterinaria}?useSSL=false&serverTimezone=America/Bogota&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-clinica_user}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-clinica_pass}
      
      # Configuración JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      
      # JWT Secret (cambiar en producción)
      JWT_SECRET: ${JWT_SECRET:-clavesecretamuyseguraylargacon32caracteres123}
      
      # Configuración del servidor
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      
      # Zona horaria
      TZ: America/Bogota
      
      # Java Options
      JAVA_OPTS: -Xmx512m -Xms256m -XX:+UseG1GC
    
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    
    depends_on:
      mysql:
        condition: service_healthy
    
    networks:
      - clinica-network
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    volumes:
      # Logs persistentes (opcional)
      - backend-logs:/app/logs

  # ==================================================================
  # SERVICIO 3: Frontend React (PLACEHOLDER - construir después)
  # ==================================================================
  # frontend:
  #   build:
  #     context: ../frontend-gestion-citas
  #     dockerfile: Dockerfile
  #   container_name: clinica-frontend
  #   restart: unless-stopped
  #   
  #   environment:
  #     VITE_API_URL: http://localhost:8080
  #   
  #   ports:
  #     - "${FRONTEND_PORT:-80}:80"
  #   
  #   depends_on:
  #     - backend
  #   
  #   networks:
  #     - clinica-network

  # ==================================================================
  # SERVICIO 4: Landing Page (PLACEHOLDER - construir después)
  # ==================================================================
  # landing:
  #   build:
  #     context: ../landing-page
  #     dockerfile: Dockerfile
  #   container_name: clinica-landing
  #   restart: unless-stopped
  #   
  #   ports:
  #     - "${LANDING_PORT:-8081}:80"
  #   
  #   networks:
  #     - clinica-network

# ====================================================================
# VOLÚMENES PERSISTENTES
# ====================================================================
volumes:
  mysql-data:
    driver: local
    name: clinica-mysql-data
  
  backend-logs:
    driver: local
    name: clinica-backend-logs

# ====================================================================
# REDES
# ====================================================================
networks:
  clinica-network:
    driver: bridge
    name: clinica-network

